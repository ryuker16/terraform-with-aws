/// <reference types="bluebird" />
/// <reference types="node" />
import { EventEmitter } from 'events';
import { IQueueService, IQueueConsumer, IConsumeQueueOptions } from './interfaces';
import * as BPromise from 'bluebird';
declare module 'bluebird' {
    interface OperationalError {
        cause: any;
        isOperational: boolean;
    }
}
export declare function handleAsyncError(err: BPromise.OperationalError | Error): void;
export declare class QueueConsumer<TMessage, TResult> extends EventEmitter implements IQueueConsumer<TMessage, TResult> {
    private queueService;
    static Events: {
        'messages_received': string;
        'messages_processed': string;
        'messages_processed_error': string;
        'message_processed': string;
        'message_processed_error': string;
        'message_deleted': string;
        'message_deleted_error': string;
        'messages_deleted_error': string;
    };
    constructor(queueService: IQueueService);
    static validateOptions<TMessage, TResult>(options: IConsumeQueueOptions<TMessage, TResult>): IConsumeQueueOptions<TMessage, TResult>;
    consume(options: IConsumeQueueOptions<TMessage, TResult>): BPromise<any>;
    private consumeMessages(options);
    private processMessageBatch(messages, options);
    private processMessage(message, options);
    private deleteMessageBatch(messages);
    private deleteMessage(message);
}
