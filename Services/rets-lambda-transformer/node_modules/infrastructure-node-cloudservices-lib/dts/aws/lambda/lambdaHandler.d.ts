/// <reference types="bluebird" />
import * as AWS from 'aws-sdk';
import * as Promise from 'bluebird';
export declare abstract class LambdaHandler<TEvent> {
    lambda: AWS.Lambda;
    lambdaContext: Context;
    constructor(lambda: AWS.Lambda, lambdaContext: Context);
    selfInvokeAsync(event?: TEvent, invokeParams?: AWS.Lambda.Types.InvocationRequest): Promise<any>;
}
export interface Context {
    callbackWaitsForEmptyEventLoop: boolean;
    functionName: string;
    functionVersion: string;
    invokedFunctionArn: string;
    memoryLimitInMB: number;
    awsRequestId: string;
    logGroupName: string;
    logStreamName: string;
    identity?: CognitoIdentity;
    clientContext?: ClientContext;
    getRemainingTimeInMillis(): number;
    log(message: string, object: any): void;
    fail(message: string): void;
    succeed(message: string): void;
    succeed(object: any): void;
    succeed(message: string, object: any): void;
}
export interface CognitoIdentity {
    cognitoIdentityId: string;
    cognitoIdentityPoolId: string;
}
export interface ClientContext {
    client: ClientContextClient;
    Custom?: any;
    env: ClientContextEnv;
}
export interface ClientContextClient {
    installationId: string;
    appTitle: string;
    appVersionName: string;
    appVersionCode: string;
    appPackageName: string;
}
export interface ClientContextEnv {
    platformVersion: string;
    platform: string;
    make: string;
    model: string;
    locale: string;
}
