"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var events_1 = require('events');
var async_1 = require('async');
var BPromise = require('bluebird');
var _ = require('lodash');
function isOperationalError(err) {
    return err && err instanceof BPromise.OperationalError && err.isOperational === true;
}
function handleAsyncError(err) {
    throw isOperationalError(err) ? err.cause : err;
}
exports.handleAsyncError = handleAsyncError;
var QueueConsumer = (function (_super) {
    __extends(QueueConsumer, _super);
    function QueueConsumer(queueService) {
        _super.call(this);
        this.queueService = queueService;
        if (!queueService) {
            throw new TypeError('queueService');
        }
    }
    QueueConsumer.validateOptions = function (options) {
        if (!options.batchSize) {
            throw new TypeError('batchSize');
        }
        if (options.enableBatchProcessing && typeof options.handleMessageBatch !== 'function') {
            throw new TypeError('enableBatchProcessing requires handleMessageBatch');
        }
        if (!options.batchConcurrency) {
            options.batchConcurrency = options.batchSize;
        }
        return options;
    };
    QueueConsumer.prototype.consume = function (options) {
        var _this = this;
        options = QueueConsumer.validateOptions(options);
        var isDone = false;
        this.once('empty', function () {
            isDone = true;
        });
        var doUntilTest = function () {
            return isDone || (typeof options.consumeUntil === 'function' && options.consumeUntil());
        };
        return BPromise.fromCallback(function (callback) {
            var fn = function (callback) { return BPromise.resolve(_this.consumeMessages(options)).asCallback(callback); };
            async_1.doUntil(fn, doUntilTest, callback);
        }).error(handleAsyncError);
    };
    QueueConsumer.prototype.consumeMessages = function (options) {
        var _this = this;
        return BPromise.bind(this)
            .then(function () { return _this.queueService.getMessages(options.batchSize); })
            .tap(function (messages) { return _this.emit(QueueConsumer.Events.messages_received, { messages: messages }); })
            .then(function (messages) {
            if (messages && messages.length) {
                if (options.enableBatchProcessing) {
                    return _this.processMessageBatch(messages, options);
                }
                else {
                    return BPromise.map(messages, function (message) { return _this.processMessage(message, options); }, { concurrency: options.batchConcurrency });
                }
            }
            else {
                _this.emit('empty');
            }
        });
    };
    QueueConsumer.prototype.processMessageBatch = function (messages, options) {
        var _this = this;
        return BPromise.bind(this)
            .then(function () { return BPromise.resolve(options.handleMessageBatch(messages)); })
            .tap(function (result) { return _this.emit(QueueConsumer.Events.messages_processed, { result: result, messages: messages }); })
            .catch(function (err) {
            _this.emit(QueueConsumer.Events.messages_processed_error, { messages: messages, err: err });
            throw err;
        })
            .then(function () { return _this.deleteMessageBatch(messages); });
    };
    QueueConsumer.prototype.processMessage = function (message, options) {
        var _this = this;
        if (message) {
            return BPromise.bind(this)
                .then(function () { return BPromise.resolve(options.handleMessage(message)); })
                .tap(function (result) { return _this.emit(QueueConsumer.Events.message_processed, { result: result, message: message }); })
                .catch(function (err) {
                _this.emit(QueueConsumer.Events.message_processed_error, { message: message, err: err });
                throw err;
            })
                .then(function () { return _this.deleteMessage(message); });
        }
    };
    QueueConsumer.prototype.deleteMessageBatch = function (messages) {
        var _this = this;
        return BPromise.bind(this)
            .then(function () { return _this.queueService.deleteMessages(messages); })
            .then(function (result) {
            _.forEach(result.deletions || [], function (deletion) {
                _this.emit(QueueConsumer.Events.message_deleted, { message: deletion });
            });
            _.forEach(result.failures || [], function (failure) {
                _this.emit(QueueConsumer.Events.message_deleted_error, { err: failure.Error, failure: failure });
            });
            return result;
        })
            .catch(function (err) {
            _this.emit(QueueConsumer.Events.messages_deleted_error, { messages: messages, err: err });
            throw err;
        });
    };
    QueueConsumer.prototype.deleteMessage = function (message) {
        var _this = this;
        return BPromise.bind(this)
            .then(function () { return _this.queueService.deleteMessage(message); })
            .tap(function () { return _this.emit(QueueConsumer.Events.message_deleted, { message: message }); })
            .catch(function (err) {
            _this.emit(QueueConsumer.Events.message_deleted_error, { message: message, err: err });
            throw err;
        });
    };
    QueueConsumer.Events = {
        'messages_received': 'messages_received',
        'messages_processed': 'messages_processed',
        'messages_processed_error': 'messages_processed_error',
        'message_processed': 'message_processed',
        'message_processed_error': 'message_processed_error',
        'message_deleted': 'message_deleted',
        'message_deleted_error': 'message_deleted_error',
        'messages_deleted_error': 'messages_deleted_error'
    };
    return QueueConsumer;
}(events_1.EventEmitter));
exports.QueueConsumer = QueueConsumer;
