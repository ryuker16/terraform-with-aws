"use strict";
var _ = require('lodash');
var BPromise = require('bluebird');
var SQSQueueClient = (function () {
    function SQSQueueClient(sqs, queueUrl) {
        this.sqs = sqs;
        this.queueUrl = queueUrl;
        if (!sqs) {
            throw new TypeError('sqs');
        }
        if (!_.isFunction(sqs.receiveMessage)) {
            throw new TypeError('sqs.receiveMessage');
        }
    }
    SQSQueueClient.mapMessage = function (msg) {
        return {
            Id: msg.MessageId,
            Handle: msg.ReceiptHandle,
            Data: JSON.parse(msg.Body),
            ProviderMessage: msg
        };
    };
    SQSQueueClient.prototype.getMessage = function (options) {
        var params = {
            QueueUrl: this.getQueueUrl(options)
        };
        return BPromise.resolve(this.sqs.receiveMessage(params).promise())
            .then(function (result) {
            var messages = _.map(result.Messages, function (msg) { return SQSQueueClient.mapMessage(msg); });
            return _.first(messages);
        });
    };
    SQSQueueClient.prototype.getMessages = function (batchSize, options) {
        var params = {
            QueueUrl: this.getQueueUrl(options),
            MaxNumberOfMessages: batchSize
        };
        return BPromise.resolve(this.sqs.receiveMessage(params).promise())
            .then(function (result) {
            return _.map(result.Messages, SQSQueueClient.mapMessage);
        });
    };
    SQSQueueClient.prototype.deleteMessage = function (message, options) {
        var params = {
            QueueUrl: this.getQueueUrl(options),
            ReceiptHandle: message.Handle
        };
        return BPromise.resolve(this.sqs.deleteMessage(params).promise());
    };
    SQSQueueClient.prototype.deleteMessages = function (messages, options) {
        var params = {
            QueueUrl: this.getQueueUrl(options),
            Entries: _.map(messages, function (msg) {
                return {
                    Id: msg.Id,
                    ReceiptHandle: msg.Handle
                };
            })
        };
        return BPromise.resolve(this.sqs.deleteMessageBatch(params).promise())
            .then(function (result) {
            var deletions = result.Successful;
            var failures = _.map(result.Failed, function (failed) {
                return {
                    Id: failed.Id,
                    Error: new Error(failed.Message)
                };
            });
            return { deletions: deletions, failures: failures };
        });
    };
    SQSQueueClient.prototype.getQueueUrl = function (options) {
        if (options && options.url) {
            return options.url;
        }
        return this.queueUrl;
    };
    return SQSQueueClient;
}());
exports.SQSQueueClient = SQSQueueClient;
