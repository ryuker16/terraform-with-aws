import * as _ from 'lodash';
import * as Promise from 'bluebird';
export class LambdaHandler {
    constructor(lambda, lambdaContext) {
        this.lambda = lambda;
        this.lambdaContext = lambdaContext;
        if (!_.isObjectLike(lambda)) {
            throw new TypeError('lambda');
        }
        if (!_.isObjectLike(lambdaContext)) {
            throw new TypeError('lambdaContext');
        }
    }
    selfInvokeAsync(event, invokeParams) {
        let params = {
            FunctionName: this.lambdaContext.functionName,
            InvocationType: 'Event'
        };
        if (_.isObject(invokeParams)) {
            params = _.defaults(invokeParams, params);
        }
        if (_.isObjectLike(event)) {
            params.Payload = JSON.stringify(event);
        }
        return Promise.resolve(this.lambda.invoke(params).promise());
    }
}
