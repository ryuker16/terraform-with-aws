import * as AWS from 'aws-sdk'
import * as _ from 'lodash'
import * as BPromise from 'bluebird'
import { IQueueClient, IQueueMessage, IQueueMessageOf, IDeleteMessagesResult, IQueueOptions } from '../../queues'

export class SQSQueueClient implements IQueueClient {
  constructor(
    private sqs: AWS.SQS,
    private queueUrl?: string) {
    if (!sqs) {
      throw new TypeError('sqs')
    }
    if (!_.isFunction(sqs.receiveMessage)) {
      throw new TypeError('sqs.receiveMessage')
    }
  }
  static mapMessage<T>(msg: AWS.SQS.Types.Message): IQueueMessageOf<T, AWS.SQS.Types.Message> {
    return {
      Id: msg.MessageId,
      Handle: msg.ReceiptHandle,
      Data: JSON.parse(msg.Body),
      ProviderMessage: msg
    }
  }
  getMessage<T>(options?: IQueueOptions): BPromise<IQueueMessage<T>> {
    let params: AWS.SQS.Types.ReceiveMessageRequest = {
      QueueUrl: this.getQueueUrl(options)
    }
    return BPromise.resolve(this.sqs.receiveMessage(params).promise())
      .then((result) => {
        let messages = _.map(result.Messages, (msg) => SQSQueueClient.mapMessage<T>(msg))
        return _.first(messages)
      })
  }
  getMessages<T>(batchSize: number, options?: IQueueOptions): BPromise<IQueueMessage<T>[]> {
    let params: AWS.SQS.Types.ReceiveMessageRequest = {
      QueueUrl: this.getQueueUrl(options),
      MaxNumberOfMessages: batchSize
    }
    return BPromise.resolve(this.sqs.receiveMessage(params).promise())
      .then((result: AWS.SQS.Types.ReceiveMessageResult) => {
        return _.map(result.Messages, SQSQueueClient.mapMessage)
      })
  }
  deleteMessage(message: IQueueMessage<any>, options?: IQueueOptions): BPromise<any> {
    let params: AWS.SQS.Types.DeleteMessageRequest = {
      QueueUrl: this.getQueueUrl(options),
      ReceiptHandle: message.Handle
    }
    return BPromise.resolve(this.sqs.deleteMessage(params).promise())
  }
  deleteMessages(messages: IQueueMessage<any>[], options?: IQueueOptions): BPromise<IDeleteMessagesResult> {
    let params: AWS.SQS.Types.DeleteMessageBatchRequest = {
      QueueUrl: this.getQueueUrl(options),
      Entries: _.map(messages, msg => {
        return {
          Id: msg.Id,
          ReceiptHandle: msg.Handle
        }
      })
    }
    return BPromise.resolve(this.sqs.deleteMessageBatch(params).promise())
      .then((result: AWS.SQS.Types.DeleteMessageBatchResult) => {
        let deletions = result.Successful
        let failures = _.map(result.Failed, (failed) => {
          return {
            Id: failed.Id,
            Error: new Error(failed.Message)
          }
        })
        return { deletions, failures } as IDeleteMessagesResult
      })
  }
  private getQueueUrl(options?: IQueueOptions) {
    if (options && options.url) {
      return options.url
    }
    return this.queueUrl
  }
}
