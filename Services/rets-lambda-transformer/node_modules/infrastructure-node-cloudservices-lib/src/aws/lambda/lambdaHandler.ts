import * as AWS from 'aws-sdk'
import * as _ from 'lodash'
import * as Promise from 'bluebird'

export abstract class LambdaHandler<TEvent> {
  constructor(
    public lambda: AWS.Lambda,
    public lambdaContext: Context) {
    if (!_.isObjectLike(lambda)) {
      throw new TypeError('lambda')
    }
    if (!_.isObjectLike(lambdaContext)) {
      throw new TypeError('lambdaContext')
    }
  }
  selfInvokeAsync(event?: TEvent, invokeParams?: AWS.Lambda.Types.InvocationRequest): Promise<any> {
    let params: AWS.Lambda.Types.InvocationRequest = {
      FunctionName: this.lambdaContext.functionName,
      InvocationType: 'Event'
    }
    if (_.isObject(invokeParams)) {
      params = _.defaults(invokeParams, params)
    }
    if (_.isObjectLike(event)) {
      params.Payload = JSON.stringify(event)
    }
    return Promise.resolve(this.lambda.invoke(params).promise())
  }
}

// Context
// http://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-context.html
export interface Context {
  // Properties
  callbackWaitsForEmptyEventLoop: boolean
  functionName: string
  functionVersion: string
  invokedFunctionArn: string
  memoryLimitInMB: number
  awsRequestId: string
  logGroupName: string
  logStreamName: string
  identity?: CognitoIdentity
  clientContext?: ClientContext

  // Functions
  getRemainingTimeInMillis(): number

  // Functions for compatibility with earlier Node.js Runtime v0.10.42
  log(message: string, object: any): void
  fail(message: string): void
  succeed(message: string): void
  succeed(object: any): void
  succeed(message: string, object: any): void
}

export interface CognitoIdentity {
  cognitoIdentityId: string
  cognitoIdentityPoolId: string
}

export interface ClientContext {
  client: ClientContextClient
  Custom?: any
  env: ClientContextEnv
}

export interface ClientContextClient {
  installationId: string
  appTitle: string
  appVersionName: string
  appVersionCode: string
  appPackageName: string
}

export interface ClientContextEnv {
  platformVersion: string
  platform: string
  make: string
  model: string
  locale: string
}
