import * as BPromise from 'bluebird'
import * as Q from './interfaces'
import { defaults } from 'lodash'

export class QueueService implements Q.IQueueService {
  constructor(
    private client: Q.IQueueClient,
    private options?: Q.IQueueOptions) {
    if (!client) {
      throw new TypeError('client')
    }
  }

  getMessage<T>(options?: Q.IQueueOptions) {
    return BPromise.resolve(this.client.getMessage<T>(this.getOptions(options)))
  }

  getMessages<T>(batchSize: number, options?: Q.IQueueOptions) {
    return BPromise.resolve(this.client.getMessages<T>(batchSize, this.getOptions(options)))
  }

  deleteMessage(message: Q.IQueueMessage<any>, options?: Q.IQueueOptions) {
    return BPromise.resolve(this.client.deleteMessage(message, this.getOptions(options)))
  }

  deleteMessages(messages: Q.IQueueMessage<any>[], options?: Q.IQueueOptions): BPromise<Q.IDeleteMessagesResult> {
    return BPromise.resolve(this.client.deleteMessages(messages, this.getOptions(options)))
  }

  private getOptions(options?: Q.IQueueOptions): Q.IQueueOptions {
    return defaults({}, options, this.options)
  }
}
