/// <reference types="mocha" />
/// <reference types="sinon-as-promised" />

import { expect, assert, use } from 'chai'
import { QueueService } from '../../src/queues/queueService'
import * as sinon from 'sinon'
import * as sinonChai from 'sinon-chai'
use(sinonChai)
import 'sinon-as-promised'
import * as Faker from 'faker'

describe('QueueConsumer', function () {
  let subject: QueueService = null
  let queueClient: any = null
  beforeEach(function () {
    let fn = () => { throw '' }
    queueClient = sinon.stub({
      getMessage: fn,
      getMessages: fn,
      deleteMessage: fn,
      deleteMessages: fn
    })
    subject = new QueueService(queueClient)
  })
  describe('constructor', function () {
    it('should error without QueueClient', function () {
      assert.throws(() => {
        return new QueueService(null)
      })
    })
  })
  describe('getMessage', function () {
    it('should call to client.getMessage', function () {
      let opts = {}
      return subject.getMessage(opts).then(() => {
        expect(queueClient.getMessage).to.have.been.calledWith(opts)
      })
    })
  })
  describe('getMessages', function () {
    it('should call to client.getMessages', function () {
      let opts = {}
      let batchSize = Faker.random.number()
      return subject.getMessages(batchSize, opts).then(() => {
        expect(queueClient.getMessages).to.have.been.calledWith(batchSize, opts)
      })
    })
  })
  describe('deleteMessage', function () {
    it('should call to client.deleteMessage', function () {
      let opts = {}
      let message = [1]
      return subject.deleteMessage(message, opts).then(() => {
        expect(queueClient.deleteMessage).to.have.been.calledWith(message, opts)
      })
    })
  })
  describe('deleteMessages', function () {
    it('should call to client.deleteMessages', function () {
      let opts = {}
      let messages = [0]
      return subject.deleteMessages(messages, opts).then(() => {
        expect(queueClient.deleteMessages).to.have.been.calledWith(messages, opts)
      })
    })
  })
})
