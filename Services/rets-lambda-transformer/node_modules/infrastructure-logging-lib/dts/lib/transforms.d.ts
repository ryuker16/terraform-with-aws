/// <reference types="node" />
/// <reference types="bunyan" />
import { Transform } from 'stream';
import * as bunyan from 'bunyan';
export interface KinesifyTransformOptions {
    PartitionKey?: string;
    objectMode?: true;
}
/**
 * Transform to turn JS object messages into kinesis PutRecords designed for
 * 'kinesis' library stream. Always has objectMode set to true.
 * Emits objects with
 *   Data: Base64 encoded JSON of object
 *   PartitionKey: unspecified but constant string
 */
export declare class KinesifyTransform extends Transform {
    PartitionKey: string;
    constructor(options: KinesifyTransformOptions);
    _transform(obj: any, encoding: any, cb: any): void;
}
/**
 * Transforms raw log records recieved from bunyan to fit Placester standard
 * log format.
 * Removes: 'v', 'pid', 'hostname' fields
 */
export declare class PostBunyanTransform extends Transform {
    private raw;
    /**
     * Constructs a new transform.
     * Options:
     *  - {boolean} raw: if true, returns raw JavaScript record object instead of JSON
     */
    constructor(options?: any);
    _transform(obj: any, endcoding: any, cb: any): void;
}
/**
 * Takes a bunyan Stream object, and inserts a PostBunyanTransform
 * before the stream destination. Destination streams should be unaffected
 * except as the Transform molds objects passed through.
 * @param {object} bunyanStream following bunyan 'Stream' semantics
 *   bunyanStream.stream must be defined
 * @return {bunyan Stream} the bunyan Stream with the Transform applied
 */
export declare function applyPostBunyanTransform(bunyanStream: bunyan.Stream): bunyan.Stream;
