'use strict'
import { Logger, ILogger, ILoggerImplementationOptions } from './logger'

/**
 * A Logger Factory that creates Logger objects by name, returning the original
 * logger if one already exists with the same name.
 */
class LogManager {
  private loggers: { [index: string]: ILogger }

  constructor() {
    this.loggers = {}
  }

  /**
   * Gets a logger with the given `appName_serviceName` name. Creates a new logger if none exist with
   * the said `name`.
   * @param {string} appName The appName name of the Logger to be created or retrieved
   * @param {string} serviceName The serviceName name of the Logger to be created or retrieved
   * @param {object} context The default properties to be included in all log messages
   * @param {Logger} The new or retrieved Logger
   */
  public getLogger(
    appName: string,
    serviceName: string,
    context?: any,
    implementation?: ILoggerImplementationOptions) {
    if (!appName) {
      throw new TypeError('appName')
    }
    if (!serviceName) {
      throw new TypeError('serviceName')
    }
    let key = Logger.getLoggerName(appName, serviceName)
    if (!this.loggers[key]) {
      this.loggers[key] = new Logger(appName, serviceName, context, implementation)
    } else {
      this.loggers[key].mergeContext(context)
    }
    return this.loggers[key]
  }
}

export { LogManager }
