import { Writable } from 'stream'
import { LogLevels } from './core'
import * as bunyan from 'bunyan'

/**
 * ConsoleStream
 */
class ConsoleStream extends Writable {
  private consolelog = console.log.bind(console)
  constructor() {
    super({ objectMode: false })
  }
  /**
   * @override to Writeable._write
   * When bunyan stream definition is NOT raw, then each chunk is a buffer of the JSON-stringified bunyan stream
   */
  protected _write(chunk: Buffer, encoding, callback) {
    this.consolelog(chunk.toString())
    setImmediate(callback)
  }
}

/**
 * Returns the bunyan stream definition with { stream: ConsoleStream }
 * raw:
 * Similar to a "stream" writable stream, except that the write method is given raw log record Objects instead of a JSON-stringified string.
 *
 * Usage:
 * var logger = getLogger(appName, serviceName, context?, options? )
 * logger.addStream(getConsoleStream({ level: 'info' }))
 */
export function getConsoleStream(opts?: { level: LogLevels }): bunyan.Stream {
  const level = (opts && opts.level) || 'info'
  return { level, stream: new ConsoleStream() }
}
