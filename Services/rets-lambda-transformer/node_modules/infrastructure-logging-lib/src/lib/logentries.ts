const logentries = require('le_node')

export interface EstablishLogEntriesStreamOptions {
  token: string
  console?: boolean; // If truthy, log events also get sent to console.log, console.warn and console.error as appropriate.Default: false.
  levels?: any[] // Custom names for the 8 log levels and their corresponding methods. More details on this below
  minLevel?: number;
  bufferSize?: number;
  // The maximum number of log entries that may be queued in the internal ring buffer for sending at a given moment.Default: 16192.
  secure?: boolean;
  // If truthy, uses a tls connection.Default: false.
  inactivityTimeout?: number;
  // The time, in milliseconds, that inactivity should warrant closing the connection to the host until needed again.Defaults to 15 seconds.
  disableTimeout?: number;
  // Sets the socket timeout to 0. Should not be used with inactivityTimeout option.
  reconnectInitialDelay?: number;
  // Initial wait time in milliseconds while reconnecting.Default: 1000
  reconnectMaxDelay?: number;
  // Maximum wait time in milliseconds while reconnecting.Default: 15 * 1000
  reconnectBackoffStrategy?: 'fibonacci' | 'exponential';
  // Backoff strategy to be used while trying to reconnect.It can be either fibonacci or exponential.Default: fibonnacci
  /** 
   * [Removed with new connection handling] The number of times to retry to reach the logentries host in case of error when connecting.
   * Default: 15.
   */
  maxFailedAttempts?: number;
  retryTimeout?: number;
  // [Removed with new connection handling] Time to wait between attemps when trying to reach the logentries host.Default: 15 * 60 * 1000.
}

export function getLogEntriesBunyanStream(options: EstablishLogEntriesStreamOptions) {
  if (!options) {
    throw new TypeError('options')
  }
  return logentries.bunyanStream(options)
}
