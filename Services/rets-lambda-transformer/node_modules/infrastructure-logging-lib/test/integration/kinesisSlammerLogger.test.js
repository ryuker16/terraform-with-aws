/* eslint-env node, mocha */
'use strict'
var Faker = require('Faker')
var uuid = require('uuid')
var config = require('./slammerConfig')
var LogManager = require('../../dist/index')

var fs = require('fs-extra')
var path = require('path')
var file = path.resolve(__dirname, 'logs/', path.basename(__filename) + '.log')
console.log(file)
fs.ensureFileSync(file)
var tempLog = fs.createWriteStream(file, { flags: 'a' })

function main (args) {
  if (!(args[0] || config.count)) {
    console.log('Slam count must be specified in config or as first argument')
    process.exit()
  }
  var count = args[0] || config.count
  var delay = args[1] || 0
  console.log('Slamming ' + count + ' example messages')
  slamKinesis(count)
  if (delay !== 0) {
    console.log('Slamming ' + count + ' example messages every ' + delay + 'ms')
    setInterval(() => {
      slamKinesis(count)
      process.exit(0)
    }, delay)
  } else {
    process.exit(0)
  }
}

function slamKinesis (num) {
  var logger = LogManager.getLogger(path.basename(__filename))
  var msgs = generateMany(num)
  for (var i = 0; i < msgs.length; i++) {
    if (i % 5 === 0) {
      logger.boundary('fizz', { msg: msgs[i], i })
    } else if (i % 3 === 0) {
      logger.audit(msgs[i].name, 'info', { msg: msgs[i], i })
    } else {
      logger.telemetry('slamming', 'i', 'digit', i, { msg: msgs[i] })
    }
    console.log(msgs[i].msg)
    tempLog.write(JSON.stringify(msgs[i], null, 4) + '\n')
  }
}

// MASS GENERATORS

function generateMany (num, generators) {
  generators = generators || getGenerators()
  var remaining = num
  var msgs = []
  while (remaining > 0) {
    var chunkcount = Math.min(remaining, Faker.random.number(5) + 1)
    msgs = ([]).concat(msgs, generateCorrelated(chunkcount, generators))
    remaining -= chunkcount
  }
  return msgs
}

function generateCorrelated (num, generators) {
  var correlationID = uuid.v4()
  var msgs = []
  for (var i = 0; i < num; i++) {
    var generator = Faker.random.array_element(generators)
    msgs.push(withCorrelation(generator(), correlationID))
  }
  return msgs
}

function withCorrelation (base, correlationID) {
  Object.assign(base.context, { 'correlationID': correlationID })
  return base
}

// INDIVIDUAL GENERATORS

function getGenerators () {
  return [createBase, createTelemetry, createBoundary]
}

function createBase () {
  var name = camel(Faker.random.catch_phrase_noun())
  var eventID = uuid.v4()
  var time = new Date().toISOString()
  var base = {
    'context': {
      'service': pascal([firstUpper(name), 'Service']),
      'file': camel(name) + '.js',
      'correlationID': eventID
    },
    'level': randomLevel(40),
    'time': time,
    '@timestamp': time,
    'type': 'audit',
    'msg': Faker.Company.bs(),
    'eventID': eventID
  }
  var extraContextKey = camel(Faker.random.catch_phrase_noun())
  var extraContextVal = camel(Faker.random.catch_phrase_descriptor())
  base.context[extraContextKey] = extraContextVal
  return base
}

function createTelemetry () {
  var base = createBase()
  var telemetryNoun = camel(Faker.random.catch_phrase_noun())
  var telemetry = {
    'type': 'telemetry',
    'telemetry': {
      'name': camel([Faker.random.catch_phrase_descriptor(), telemetryNoun]),
      'targetType': 'counter',
      'unit': telemetryNoun,
      'value': Faker.random.number(20)
    }
  }
  return Object.assign(base, telemetry)
}

function createBoundary () {
  var base = createBase()
  // var arguments = {}
  // for (var i = 0; i < Faker.random.number(4); i++) {
  //   arguments[camel(Faker.random.catch_phrase_noun())] = camel(Faker.random.catch_phrase_noun())
  // }

  var boundary = {
    'type': 'boundary',
    'boundary': {
      'name': camel([Faker.random.array_element(['start', 'end'])])
    }
  }
  return Object.assign(base, boundary)
}

// HELPERS

function firstUpper (string) {
  return string.charAt(0).toUpperCase() + string.slice(1)
}

function separateWords (phrases) {
  if (!Array.isArray(phrases)) {
    phrases = [phrases]
  }
  var split = []
  for (var i = 0; i < phrases.length; i++) {
    split.push(phrases[i].split(/[ -]/))
  }
  return [].concat.apply([], split)
}

function camel (phrases) {
  var words = separateWords(phrases)
  words[0] = words[0].toLowerCase()
  for (var i = 1; i < words.length; i++) {
    words[i] = firstUpper(words[i])
  }
  return words.join('')
}

function pascal (phrases) {
  return firstUpper(camel(phrases))
}

// function getVerb () {
//   var verbs = ['map', 'add', 'clone', 'wipe', 'delete', 'combine', 'do', 'break',
//     'process']
//   return Faker.random.array_element(verbs)
// }

function randomLevel (max) {
  max = max || 60
  var genmax = max / 10
  return Faker.random.number(genmax) * 10 + 10
}

if (require.main === module) {
  main(process.argv.slice(2))
}
