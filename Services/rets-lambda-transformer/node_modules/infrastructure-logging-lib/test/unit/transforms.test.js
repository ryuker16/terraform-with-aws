/* eslint-env node, mocha */
'use strict'
var chai = require('chai')
var expect = chai.expect
var PassThrough = require('stream').PassThrough
var Faker = require('faker')
var transforms = require('../../dist/lib/transforms')
var KinesifyTransform = transforms.KinesifyTransform
var PostBunyanTransform = transforms.PostBunyanTransform

describe('KinesifyTransform', function () {
  let kinesifyTransform = null
  let passThrough = null
  let PartitionKey = ''
  beforeEach(function () {
    PartitionKey = Faker.random.uuid()
    kinesifyTransform = new KinesifyTransform({ PartitionKey })
    passThrough = new PassThrough({ objectMode: true })
    kinesifyTransform.pipe(passThrough)
  })

  describe('_transform()', function () {
    it('"Data" is Base64 encoded JSON', function () {
      kinesifyTransform.write({ 'a': 'b' })
      expect(passThrough.read()).to.have.property('Data').equal('eyJhIjoiYiJ9')
    })
    it('has a "PartitionKey"', function () {
      kinesifyTransform.write({})
      expect(passThrough.read())
        .to.have.property('PartitionKey')
        .that.is.eq(PartitionKey)
    })

    var expectCollect = function (kinesisTransform, passThrough, count) {
      for (let i = 0; i < count; i++) {
        kinesifyTransform.write({ 'a': i })
      }
      kinesifyTransform.read()
      let readData = passThrough.read()
      let i = 0
      while (readData) {
        kinesifyTransform.read()
        readData = passThrough.read()
        i++
      }
      expect(i).to.equal(count)
    }

    it('collects a few before piping', function () {
      expectCollect(kinesifyTransform, passThrough, Faker.random.number({ min: 10, max: 100 }))
    })

    it('collects a ton before piping', function () {
      expectCollect(kinesifyTransform, passThrough, Faker.random.number({ min: 1000, max: 2000 }))
    })
  })
})

describe('PostBunyanTransform', function () {
  let transform
  let rawTransform
  let passThrough
  let rawPassThrough

  beforeEach(function () {
    transform = new PostBunyanTransform()
    rawTransform = new PostBunyanTransform({ raw: true })
    passThrough = new PassThrough({ objectMode: true })
    rawPassThrough = new PassThrough({ objectMode: true })
    transform.pipe(passThrough)
    rawTransform.pipe(rawPassThrough)
  })

  it('default sends JSON', function () {
    transform.write({ 'a': 1 })
    expect(JSON.parse(passThrough.read())).to.deep.equal({ 'a': 1 })
  })
  it('options.raw=true sends objects', function () {
    rawTransform.write({ 'a': 1 })
    expect(rawPassThrough.read()).to.be.an('object')
  })
  it('removes v, pid, hostname', function () {
    let obj = { 'v': 1, 'pid': 2, 'hostname': 3, 'keep': 4 }
    rawTransform.write(obj)
    let out = rawPassThrough.read()
    expect(out).to.have.property('keep')
    expect(out).to.not.have.any.keys('v', 'pid', 'hostname')
  })
})
