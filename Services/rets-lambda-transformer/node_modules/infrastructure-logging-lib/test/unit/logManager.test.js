/* eslint-env node, mocha */
'use strict'
var chai = require('chai')
var expect = chai.expect
var LogManager = require('../../dist/lib/logManager').LogManager

describe('LogManager', function () {
  let logMan

  beforeEach(function () {
    logMan = new LogManager()
  })

  describe('getLogger', function () {
    it('should throw without domain and service', function () {
      expect(() => {
        return logMan.getLogger('a')
      }).to.throw(TypeError)
      expect(() => {
        return logMan.getLogger()
      }).to.throw(TypeError)
      expect(() => {
        return logMan.getLogger('a', 's')
      }).not.to.throw(TypeError)
    })
    it('returns logger with proper name', function () {
      let logger = logMan.getLogger('test', 'test-service')
      expect(logger.getName()).to.equal('test_test-service')
    })
    it('different names produce different loggers', function () {
      let loggerA = logMan.getLogger('A', 'serviceA')
      let loggerB = logMan.getLogger('B', 'serviceB')
      expect(loggerA).to.not.equal(loggerB)
    })
    it('same names produce same loggers', function () {
      let loggerA = logMan.getLogger('test', 'a')
      let loggerB = logMan.getLogger('test', 'a')
      expect(loggerA).to.equal(loggerB)
    })
  })
})
