/// <reference types="node" />
export declare type AUDIT_LEVELS = "trace" | "debug" | 'info' | 'warn';
export interface ILogger {
    boundary(edge: string, context?: any): void;
    telemetry(name: string, targetType: string, unit: string, value: any, context?: any): void;
    audit(msg: string, level: AUDIT_LEVELS, context?: any): void;
    error(err: Error, context?: any): void;
}
export interface IClassPrototype {
    constructor: {
        name: string;
    };
}
export interface IRemover {
    remove: () => void;
}
export declare function wireMethod(obj: any, methodName: string, logger: ILogger): IRemover;
export declare function wireMethodAsync(obj: any, methodName: string, logger: ILogger): IRemover;
export declare function wirePrototypeMethod(classPrototype: IClassPrototype & Object, methodName: string, logger: ILogger): IRemover;
export declare function wirePrototypeMethodAsync(classPrototype: IClassPrototype & Object, methodName: string, logger: ILogger): IRemover;
