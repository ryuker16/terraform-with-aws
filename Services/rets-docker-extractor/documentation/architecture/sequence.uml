@startuml

title "rets-docker-extractor"

boundary lambda
boundary ecs
control docker
control indexjs
participant Extractor as e

participant QueueService as qs
control SQSQueueClient as sqsClient
boundary SQS

participant RetsImporterService as ri
control retsClient
database mls

participant RetsExporterService as re
control S3Client as s3Client
database S3

participant LoggerService as log
control snsClient
boundary ImportModelReadyTopic

participant SelfTerminatorService as terminator
control ecsClient
boundary TerminateTopic


lambda -> ecs : runtask
ecs -> docker : init and start
docker -> indexjs : setup IoC
indexjs -> e : process()
e -> qs : getImportConfigMessages
qs -> sqsClient : getMessages(num?)
sqsClient <-> SQS : receiveMessages(queueUrl)
sqsClient -> qs : return Message
qs -> e : return Message<ImportConfig>
e -> ri : getImportModel(ImportConfig)
ri <-> retsClient : getAutoLogoutClient
retsClient -> mls : query
ri <-> retsClient : getObjects
retsClient -> mls : query
ri -> e : return <ImportModel>
e -> qs : removeMessage( Message<ImportConfig> )
e -> re : export(ImportModel)
re -> s3Client : putObject(ImportModel, Metatata)
s3Client -> re : return <ExportedImportModelInfo>
re -> e : return <ExportedImportModelInfo>
e -> log : logImport(ExportedImportModelInfo, Stats?, Metadata?)
log -> snsClient : publish(Message<ImportModelInfo>)
snsClient -> ImportModelReadyTopic : publish
log -> e : publish success
e -> terminator : terminate
terminator -> docker : getInstanceInfo
terminator -> ecsClient : terminateInstance(InstanceInfo)
terminator -> snsClient : publish(TerminateTopic, InstanceInfo)
snsClient -> TerminateTopic : publish
terminator -> e : done

@enduml
